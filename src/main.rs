use num::complex::Complex64;
use fft;

const Y : [f64; 64] = [4.33012702e+00f64,  4.99844591e+00,  4.44935904e+00,  2.81660029e+00, 4.97839233e-01, -1.94217398e+00, -3.90915741e+00, -4.92403877e+00, -4.73963673e+00, -3.40086369e+00, -1.23378699e+00,  1.23378699e+00, 3.40086369e+00,  4.73963673e+00,  4.92403877e+00,  3.90915741e+00, 1.94217398e+00, -4.97839233e-01, -2.81660029e+00, -4.44935904e+00, -4.99844591e+00, -4.33012702e+00, -2.60717602e+00, -2.49229428e-01, 2.16941870e+00,  4.05969003e+00,  4.96119603e+00,  4.65436874e+00, 3.21393805e+00,  9.90730716e-01, -1.47377587e+00, -3.57933425e+00, -4.81312123e+00, -4.87463956e+00, -3.74890601e+00, -1.71010072e+00, 7.45211331e-01,  3.01902205e+00,  4.55752926e+00,  4.98601899e+00, 4.20012962e+00,  2.39126989e+00,  2.20498322e-14, -2.39126989e+00, -4.20012962e+00, -4.98601899e+00, -4.55752926e+00, -3.01902205e+00, -7.45211331e-01,  1.71010072e+00,  3.74890601e+00,  4.87463956e+00, 4.81312123e+00,  3.57933425e+00,  1.47377587e+00, -9.90730716e-01, -3.21393805e+00, -4.65436874e+00, -4.96119603e+00, -4.05969003e+00, -2.16941870e+00,  2.49229428e-01,  2.60717602e+00,  4.33012702e+00];

#[cfg(print_python)]
fn print_samples(samples: & Vec<Complex64>) {
    if samples.len() == 0 {
        return;
    }
    print!("[{}{:+}j", samples[0].re, samples[0].im);
    for i in 1..samples.len() {
        print!(", {}{:+}j", samples[i].re, samples[i].im);
    }
    println!("]");
}

#[cfg(not(print_python))]
fn print_samples(samples: & Vec<Complex64>) {
    println!("{:#?}", samples);
}


fn main() {

    let mut samples = Vec::with_capacity(Y.len());
    for y in Y.iter() {
        samples.push(Complex64::from(y));
    }

    match fft::fft(&samples, fft::Direction::Forward) {
        Err(msg) => println!("Error doing fft: {}", msg),
        Ok(spectrum) => {
            print_samples(&spectrum);
        }
    }
}
